import os
import json
import re
import tempfile
import zipfile
from aiogram import Bot, Dispatcher, types, executor, filters
from openpyxl import Workbook, load_workbook
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio
from aiogram.types import BotCommand
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

job_dir = 'Job'
json_dir = os.path.join(job_dir, 'downloads_json')
vcf_dir = os.path.join(job_dir, 'phone_number_processing')
os.makedirs(json_dir, exist_ok=True)
os.makedirs(vcf_dir, exist_ok=True)

API_TOKEN = '7116609487:AAFpo2EHfOwwXiIks24NrfZTYKQiFKv-Oa4'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

codes_to_add_38 = ['063', '068', '067', '066', '050', '097', '095', '093']
ADMINS = ["1968152743"]  #ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤  1968152743

def admin_required(handler):
    async def wrapper(message: types.Message, *args, **kwargs):
        user_id = str(message.from_user.id)
        if user_id not in ADMINS:
            return await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return await handler(message, *args, **kwargs)
    return wrapper

class Form(StatesGroup):
    number_count = State()
class JobState(StatesGroup):
    waiting_for_job_acceptance = State()
class AdminState(StatesGroup):
    upload_file = State()

@dp.message_handler(commands=['start'], state="*")
async def send_welcome(message: types.Message, state: FSMContext):
    await state.finish()  # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(message.from_user.id)
    if user_id in ADMINS:
        start_message = (
            "–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –¢—ã –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /upload.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /clear_used_files –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help."
        )
    else:
        start_message = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /takejob, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help.\n"
            "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ —É–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã!"
        )
    await message.reply(start_message)


@dp.message_handler(commands=['help'], state="*")
async def send_help(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = str(message.from_user.id)

    # –û–±—â–∞—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    help_message = (
        "üÜò –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
        "üì§ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        "- /takejob - –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª .vcf —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.\n"
        "- –û—Ç–ø—Ä–∞–≤—å '–¥–∞', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—ë–º –∑–∞–¥–∞–Ω–∏—è.\n"
        "- –û—Ç–ø—Ä–∞–≤—å '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–¥–∞–Ω–∏—è.\n"
        "üîß –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    if user_id in ADMINS:
        admin_message = (
            "\nüì• –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª—ã .json –∏–ª–∏ .zip —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
            "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –∞—Ä—Ö–∏–≤–∞ ‚Äî 20 –ú–ë.\n"
            "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤.\n"
            "- /clear_used_files - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫"
            "ü§ñ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /take_job.\n"
        )
        help_message += admin_message  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    await message.reply(help_message, parse_mode=types.ParseMode.MARKDOWN)

@admin_required
@dp.message_handler(commands=['clear_used_files'], state="*")
async def clear_used_files(message: types.Message, state: FSMContext):
    used_files_log_path = os.path.join(vcf_dir, 'used_files.txt')
    open(used_files_log_path, 'w').close()  # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ VCF —Ñ–∞–π–ª–∞–º–∏
    # –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–æ–∫ —Å JSON –∏ VCF —Ñ–∞–π–ª–∞–º–∏
    for folder in [json_dir, vcf_dir]:
        for filename in os.listdir(folder):
            file_path = os.path.join(folder, filename)
            if os.path.isfile(file_path):
                os.unlink(file_path)
    await message.answer("–í—Å–µ –∂—É—Ä–Ω–∞–ª—ã –∏ –ø–∞–ø–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")


@dp.message_handler(commands=['takejob'], state='*')
async def take_job(message: types.Message, state: FSMContext):
    await JobState.waiting_for_job_acceptance.set()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–î–∞", callback_data="accept_job"))
    keyboard.add(InlineKeyboardButton("–ù–µ—Ç", callback_data="decline_job"))
    await message.reply("–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.", reply_markup=keyboard)


@dp.callback_query_handler(Text(equals="accept_job"), state=JobState.waiting_for_job_acceptance)
async def process_accept_job(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_first_name = callback_query.from_user.first_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_username = callback_query.from_user.username  # –Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    used_files_log_path = os.path.join(vcf_dir, 'used_files.txt')
    if os.path.exists(used_files_log_path):
        with open(used_files_log_path, 'r', encoding='utf-8') as used_files_log:
            used_files = used_files_log.read().splitlines()
    else:
        used_files = []

    vcf_files = [f for f in os.listdir(vcf_dir) if os.path.isfile(os.path.join(vcf_dir, f))
                 and f.endswith('.vcf') and f not in used_files]

    if vcf_files:
        vcf_file_to_send = vcf_files[0]
        vcf_file_path = os.path.join(vcf_dir, vcf_file_to_send)
        with open(used_files_log_path, 'a', encoding='utf-8') as used_files_log:
            used_files_log.write(vcf_file_to_send + '\n')
        await bot.send_document(user_id, types.InputFile(vcf_file_path), caption=f"–í–æ—Ç –≤–∞—à VCF —Ñ–∞–π–ª: {vcf_file_to_send}")
        await bot.send_message(user_id, "–ó–∞–¥–∞–Ω–∏–µ –≤–∑—è—Ç–æ –∏ —Ñ–∞–π–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π.")
        
        notification_message = (
            f"üë§ –†–∞–±–æ—Ç–Ω–∏–∫ @{user_username} ({user_first_name}) –≤–∑—è–ª—Å—è –∑–∞ —Ä–∞–±–æ—Ç—É.\n"
            f"üìÅ –§–∞–π–ª: {vcf_file_to_send}"
        )
        for admin_id in ADMINS:
            try:
                await bot.send_message(admin_id, notification_message)
            except:
                pass
    else:
        await bot.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö VCF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.")
    
    await state.finish()
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(Text(equals="decline_job"), state=JobState.waiting_for_job_acceptance)
async def process_decline_job(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–¥–∞–Ω–∏—è.")
    await state.finish()
    await bot.answer_callback_query(callback_query.id)

async def process_json_data(json_data):
    wb = Workbook()
    ws = wb.active
    unique_numbers = set()
    for message in json_data['messages']:
        text_entities = message.get('text_entities', [])
        phone_numbers = []
        for entity in text_entities:
            if entity.get('type') == 'phone':
                phone_number = entity.get('text', '')
                cleaned_number = clean_phone_number(phone_number)
                if cleaned_number[3:6] in codes_to_add_38 or cleaned_number[:3] in codes_to_add_38:
                    cleaned_number = '38' + cleaned_number
                phone_numbers.append(cleaned_number)
        if not phone_numbers and 'text' in message:
            text = message['text']
            if isinstance(text, list):
                text = ' '.join([entity.get('text', '') for entity in text if isinstance(entity, dict) and entity.get('text')])
            phone_numbers = extract_phone_numbers(text)
            for i, number in enumerate(phone_numbers):
                if number[3:6] in codes_to_add_38 or number[:3] in codes_to_add_38:
                    phone_numbers[i] = '38' + number
        for phone_number in phone_numbers:
            if phone_number.startswith('380') and phone_number not in unique_numbers:
                ws.append([phone_number])
                unique_numbers.add(phone_number)
    return unique_numbers

@dp.message_handler(content_types=['document'], state="*")
async def handle_docs(message: types.Message, state: FSMContext):
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    documents = [message.document]
    await process_documents(documents, message)

@dp.message_handler(content_types=types.ContentType.ANY, state="*")
async def handle_any(message: types.Message, state: FSMContext):
    await state.finish()
    if message.media_group_id and message.content_type == 'document':
        documents = [msg.document for msg in await message.get_media_group()]
        await process_documents(documents, message)

def clean_phone_number(phone_number):
    cleaned_number = re.sub(r'[\(\)\s-]', '', phone_number)
    if cleaned_number.startswith('0'):
        cleaned_number = '380' + cleaned_number[1:]
    if cleaned_number.startswith('+'):
        cleaned_number = cleaned_number[1:]
    return cleaned_number

def extract_phone_numbers(text):
    phone_numbers = []
    for match in re.finditer(r'\b(?:\+?38)?\d{7,}\b', text):
        phone_number = match.group(0)
        cleaned_number = clean_phone_number(phone_number)
        phone_numbers.append(cleaned_number)
    return phone_numbers

@dp.message_handler(commands=['upload'], state="*")
async def upload_file(message: types.Message, state: FSMContext):
    await AdminState.upload_file.set()
    await message.reply("üÜô –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª .json –∏–ª–∏ .zip —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.")

async def process_documents(documents, message):
    MAX_FILE_SIZE_MB = 20 * 1024 * 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 20 –ú–ë
    job_dir = 'Job'
    json_dir = os.path.join(job_dir, 'downloads_json')
    vcf_dir = os.path.join(job_dir, 'phone_number_processing')
    os.makedirs(json_dir, exist_ok=True)
    os.makedirs(vcf_dir, exist_ok=True)
    all_numbers = []

    for document in documents:
        if document.file_size > MAX_FILE_SIZE_MB:
            await message.answer(f"–§–∞–π–ª {document.file_name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä –∏ –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω.")
            continue
        file_path = os.path.join(json_dir, document.file_name)
        await document.download(destination_file=file_path)

        if zipfile.is_zipfile(file_path):
            with zipfile.ZipFile(file_path, 'r') as zip_ref:
                zip_ref.extractall(json_dir)
                for json_filename in zip_ref.namelist():
                    full_json_path = os.path.join(json_dir, json_filename)
                    if full_json_path.endswith('.json'):
                        with open(full_json_path, 'r', encoding='utf-8') as json_file:
                            json_data = json.load(json_file)
                            all_numbers.extend(await process_json_data(json_data))
                    else:
                        await message.answer(f"–§–∞–π–ª {json_filename} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON.")
        elif file_path.endswith('.json'):
            with open(file_path, 'r', encoding='utf-8') as json_file:
                json_data = json.load(json_file)
                all_numbers.extend(await process_json_data(json_data))
    unique_numbers = set(all_numbers)
    used_numbers = []
    total_files = (len(unique_numbers) - 1) // 201 + 1
    digits = len(str(total_files))

    for i, chunk in enumerate([list(unique_numbers)[j:j+201] for j in range(0, len(unique_numbers), 201)]):
        file_number = str(i + 1).zfill(digits)
        vcf_filename = os.path.join(vcf_dir, f'contacts{file_number}.vcf')
        with open(vcf_filename, 'w', encoding='utf-8') as vcf_file:
            for index, number in enumerate(chunk):
                vcf_file.write(f'BEGIN:VCARD\nVERSION:3.0\nN:;Number{index};;;\nFN:Number{index}\nTEL;TYPE=CELL:{number}\nEND:VCARD\n')
                used_numbers.append(number)

    used_files_log_path = os.path.join(vcf_dir, 'used_numbers.txt')
    with open(used_files_log_path, 'a', encoding='utf-8') as used_files_log:
        for number in used_numbers:
            used_files_log.write(number + '\n')

    if not all_numbers:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

async def set_bot_commands(bot):
    commands = [
        BotCommand(command="/start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/help", description="‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞"),
        BotCommand(command="/takejob", description="üë∑ –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
        BotCommand(command="/upload", description="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
    ]
    await bot.set_my_commands(commands)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
